#!/bin/bash

# Check if at least two arguments are provided
if [[ $# -lt 2 ]]; then
  echo "Usage: aoc <part> <input>"
  exit 1
fi

# Signal handler for SIGINT
handle_sigint() {
    if ! $command_running; then
        # Exit the script if no command is running
        exit 1
    fi
}

# Trap SIGINT and call the handler
trap handle_sigint SIGINT

file=$1
input=$2

# Automatically recompile when either the input or the file changes
LATEST_FILE_MOD=0
LATEST_INPUT_MOD=0

# Compile the file, run it, and display execution time
run_code() {
    echo -e "\nCompiling source..."

    clang++ -o main \
        -std=c++20 \
        -Og \
        -Wall \
        -Wextra \
        -g \
        $file

    if [[ $? != 0 ]] then
        echo -e "Compilation failed.\n"
        return
    fi

    echo -e "Running...\n"

    start_time_us=$(echo $EPOCHREALTIME | tr -d '.')
    ./main < $input
    end_time_us=$(echo $EPOCHREALTIME | tr -d '.')
    rm main

    delta_ms=$(( (end_time_us - start_time_us) / 1000 ))

    printf '\n\n┌%*s\n' 15 | tr ' ' '-'
    echo -e "| Took \e[31m$delta_ms\e[0m ms"
    printf '└%*s' $(($COLUMNS - 1)) | tr ' ' '-'
}

# If this is true, then a SIGINT (Ctrl+C) will only terminate the code running,
# and not the script itself
command_running=false

while true; do
    FILE_MOD=`stat -c %Z $file`

    # The file is missing, terminate now
    if [[ $? != 0 ]] then
        exit 1
    fi

    INPUT_MOD=`stat -c %Z $input`

    # The input is missing, open it in an editor
    if [[ $? != 0 ]] then
        nvim input
    fi

    INPUT_MOD=`stat -c %Z $input`

    if [[ $LATEST_FILE_MOD != $FILE_MOD || $LATEST_INPUT_MOD != $INPUT_MOD ]]; then
        LATEST_FILE_MOD=$FILE_MOD
        LATEST_INPUT_MOD=$INPUT_MOD

        command_running=true
        run_code
        command_running=false
    fi
    sleep 0.2
done

